#!/usr/bin/python

DOCUMENTATION = '''
---
module: xen_create
version_added: "1.0"
short_description: create a xenserver 7.0 VM
description:
     - Create a xenserver 7.0 VM
options:
  name:
    description:
      - Name of the virtual machine
    required: true
    default: null
  storage:
    description:
      - Name of storage
author: "Corky Uy (@corkyuy)"
'''

EXAMPLES = '''
# Check if the virtual machine is running
- xen_create: vm=Test
  register: st
- fail: msg="Whoops! file ownership has changed"
  when: st.xen_control.power_status != 'Running'
'''

RETURN = '''
xen_control:
  power_status
'''

import platform
from ansible.module_utils.basic import *
import re


HAVE_XENAPI = False
try:
    import XenAPI
    HAVE_XENAPI = True
except ImportError:
    pass

def get_xenapi_session():
    session = XenAPI.xapi_local()
    session.xenapi.login_with_password('', '')
    return session

def vm_start(session, vm):
    session.xenapi.VM.start(vm, False, True)
    return True

def vm_shutdown(session, xs_vm):
    session.xenapi.VM.shutdown(xs_vm)
    return True

def main():
    module = AnsibleModule(
        argument_spec=dict(
            name=dict(required=True, type='str'),
            storage=dict(required=True, type='str'),
            nic0=dict(required=False, type='str'),
            nic1=dict(required=False, type='str'),
            network0=dict(required=False, type='str'),
            network1=dict(required=False, type='str'),
            template=dict(required=False, type='str'),
        ),
        supports_check_mode=True
    )

    changed=0
    failed=0

    if not HAVE_XENAPI:
        module.fail_json(msg="python xen api required for this module")

    try:
        session = get_xenapi_session()
    except XenAPI.Failure as e:
        module.fail_json(msg='%s' % e)

    name = module.params.get('name')
    network0 = module.params.get('network0')
    network1 = module.params.get('network1')
    storage = module.params.get('storage')
    template = module.params.get('template')
    nic0 = module.params.get('nic0')
    nic1 = module.params.get('nic1')

    output = {
            'name':name,
        }


    if not template:
        template = 'CoreOS'

    if session.xenapi.VM.get_by_name_label(name):
        module.exit_json(xen_control=output)

    clone = session.xenapi.VM.get_by_name_label(template)
    if not clone:
        module.fail_json(msg="Template does not exits.")
    if not session.xenapi.VM.get_is_a_template(clone[0]):
        module.fail_json(msg="Template name specified is not a template.")

    vlan0 = []
    vlan1 = []
    if network0:
        vlan0 = session.xenapi.network.get_by_name_label(network0)
    if not vlan0:
        vlan0 = session.xenapi.network.create(
            {
                'name_label':'%s' % network0,
                'other_config': {}
            })
    if network1:
        vlan1 = session.xenapi.network.get_by_name_label(network1)
    if not vlan1:
        vlan1 = session.xenapi.network.create(
            {
                'name_label':'%s' % network1,
                'other_config': {}
            })

    sr = session.xenapi.SR.get_by_name_label(storage)
    if not sr:
        module.fail_json(msg="SR storage does not exists")

    vm = session.xenapi.VM.clone(clone[0], name)

    vm_config = session.xenapi.VM.get_other_config(vm)
    vm_config['disks'] = re.sub(r'sr=""',
            r'sr="%s"' % session.xenapi.SR.get_uuid(sr[0]),
            vm_config['disks'])
    session.xenapi.VM.set_other_config(vm, vm_config)

    if nic0:
        vif_params = {
            'locking_mode': 'network_default',
            'status_code': '0',
            'device': '0',
            'network': vlan0[0],
            'VM': vm,
            'MAC': '%s'%nic0,
            'MAC_autogenerated': False,
            'MTU': '1500',
            "qos_algorithm_type": '',
            "qos_algorithm_params": {},
            "other_config": {},
            }
        vif = session.xenapi.VIF.create( vif_params )

    if nic1:
        vif_params = {
            'locking_mode': 'network_default',
            'status_code': '0',
            'device': '1',
            'network': vlan1[0],
            'VM': vm,
            'MAC': '%s'%nic1,
            'MAC_autogenerated': False,
            'MTU': '1500',
            "qos_algorithm_type": '',
            "qos_algorithm_params": {},
            "other_config": {},
            }
        vif = session.xenapi.VIF.create( vif_params )

    session.xenapi.VM.provision(vm)

    changed=1
    module.exit_json(changed=changed, failed=failed, xen_control=output)

if __name__ == '__main__':
    main()

